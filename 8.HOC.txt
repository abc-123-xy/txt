
8. Higher Order Component


//WithLoading.jsx

import React, { Component } from 'react';

const WithLoading = (WrappedComponent) => {
  return class extends Component {
    constructor(props) {
      super(props);
      this.state = {
        isLoading: true,
      };
    }

    componentDidMount() {
      setTimeout(() => {
        this.setState({ isLoading: false });
      }, 2000); // Simulate a loading delay
    }

    render() {
      const { isLoading } = this.state;

      return isLoading ? (
        <div>Loading...</div>
      ) : (
        <WrappedComponent {...this.props} />
      );
    }
  };
};

export default WithLoading;


//MyComponent.jsx

import React from 'react';

const MyComponent = () => {
  return <h1>Hello, I'm the wrapped component!</h1>;
};

export default MyComponent;


//App.js

import React from 'react';
import MyComponent from './components/MyComponent';
import WithLoading from './components/WithLoading';

const WrappedComponentWithLoading = WithLoading(MyComponent);

function App() {
  return (
    <div>
      <h1>App with Higher-Order Component</h1>
      <WrappedComponentWithLoading />
    </div>
  );
}

export default App;

